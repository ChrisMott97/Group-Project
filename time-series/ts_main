# run simpler tests ie: mean, variance, standard deviation
# overlaping windows between classifiers
# artificial anomaly incorporation (ramp/spike/hill)/(gaussian/sigmoid differentiation)

import pytorch_lightning as pl
from pytorch_lightning.callbacks import EarlyStopping, LearningRateMonitor
from pytorch_forecasting import TimeSeriesDataSet, TemporalFusionTransformer
from pytorch_forecasting.metrics import QuantileLoss, MultiLoss
import pandas as pd
import pymysql

def load_data():
    # load data
    dbcon = pymysql.connect(user="root", password="example", database="humber_bridge", host="localhost", port=33061)
    ### unify SQL query with autoencoder to make sure output is identical, once working remove limit
    ts_data = pd.read_sql("select * from summary limit 10000", dbcon)
    ts_data.fillna(value = 0, inplace = True)
    ts_data.replace(1.1e308, 0, inplace = True)
    ts_data["timestamp"] -= ts_data["timestamp"].min()
    print(ts_data)
    return ts_data

def train_data(ts_data):
    # define dataset
    max_encoder_length = 24
    max_prediction_length = 6
    ### change timestamp when limit removed from query
    ### current timestamp should be id=4 (0-based so entry 5)
    training_cutoff = ts_data["timestamp"].max() - max_prediction_length
    ###training set may need to be changed to align with autoencoders, should work for now though
    training = TimeSeriesDataSet(
        data=ts_data[lambda x: x.timestamp <= training_cutoff],
        time_idx="timestamp",
        ### traget might have to be split into each individual sensor and timeseries ran on each individually
        target="RMS_VE",
        ### group_ids should be list of column names identifying a time series (with time_idx should denote a sample)???
        group_ids=ts_data.columns.tolist()[1:],
        min_encoder_length=12,
        min_prediction_length=1,
        max_encoder_length=max_encoder_length,
        max_prediction_length=max_prediction_length,
        allow_missing_timesteps=True
    )

    # create validation and training dataset
    validation = TimeSeriesDataSet.from_dataset(training, ts_data, predict=True, stop_randomization=True)
    batch_size = 128
    train_dataloader = training.to_dataloader(train=True, batch_size=batch_size)
    val_dataloader = validation.to_dataloader(train=False, batch_size=batch_size)

    # define trainer with early stopping
    early_stop_callback = EarlyStopping(monitor="val_loss", min_delta=1e-4, patience=1, verbose=False, mode="min")
    lr_logger = LearningRateMonitor()
    trainer = pl.Trainer(
        max_epochs=100,
        gpus=0,
        gradient_clip_val=0.1,
        limit_train_batches=30,
        callbacks=[lr_logger, early_stop_callback],
    )

    # create the model
    tft = TemporalFusionTransformer.from_dataset(
        training,
        learning_rate=0.03,
        hidden_size=32,
        attention_head_size=1,
        dropout=0.1,
        hidden_continuous_size=16,
        output_size=8,
        loss=QuantileLoss(),
        log_interval=2,
        reduce_on_plateau_patience=4
    )
    print(f"Number of parameters in network: {tft.size()/1e3:.1f}k")

    # find optimal learning rate (set limit_train_batches to 1.0 and log_interval = -1)
    ###sequence length should be at least minimum prediction length? unsure what causes this error as sequence is defined as prediction + encoding which are always positive?
    res = trainer.tuner.lr_find(
        tft, train_dataloader=train_dataloader, val_dataloaders=val_dataloader, early_stop_threshold=1000.0, max_lr=0.3, min_lr = 1e-6
    )

    print(f"suggested learning rate: {res.suggestion()}")
    fig = res.plot(show=True, suggest=True)
    fig.show()
    return tft, train_dataloader, val_dataloader, trainer

def encode_data(tft, train_dataloader, val_dataloader, trainer):
    # fit the model
    x = trainer.fit(
        tft, train_dataloader=train_dataloader, val_dataloaders=val_dataloader,
    )
    return x

def run_ts():
    ts_data = load_data()
    tft, train_dataloader, val_dataloader, trainer = train_data(ts_data)
    x = encode_data(tft, train_dataloader, val_dataloader, trainer)
    return x

run_ts()